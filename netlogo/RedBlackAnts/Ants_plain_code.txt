globals [
  nest-x-red
  nest-y-red
  nest-y-black
  nest-x-black
  number-of-food
  food-size
  food-source-x
  food-source-y
  ticks-to-give-food
]

breed [red-ants red-ant]
breed [black-ants black-ant]

patches-own [
  red-nest?            ;; true on red-nest patches
  black-nest?          ;; true on black-nest patches
  red-pheromone
  black-pheromone
  food                 ;; amount of food on the patch 0 to 2
  red-nest-scent       ;; the closest to the nest the higher
  black-nest-scent
  wall?
]

red-ants-own[
  has-food?
]

black-ants-own[
  has-food?
]

to setup
  clear-all
  setup-patches
  set-up-population
  reset-ticks
end

to set-up-population
  create-red-ants red-population
  [ set size 2
    set color red
    set shape "bug"
    setxy nest-x-red nest-y-red
    set has-food? false
  ]
  create-black-ants black-population
  [ set size 2
    set color blue
    set shape "bug"
    setxy nest-x-black nest-y-black
    set has-food? false
  ]
end

to setup-patches
  setup-wall
  ask patches
  [ setup-nest ]
  setup-food
  ask patches
  [recolor-patch]
end

to setup-wall
  ask patches[
    set wall? false
  ]
  ask patch  0 0 [ set wall? true ]
  ask patch  1 0 [ set wall? true ]
  ask patch  0 1 [ set wall? true ]
  ask patch  1 1 [ set wall? true ]
  ask patch  2 1 [ set wall? true ]
  ask patch  2 2 [ set wall? true ]
  ask patch  2 3 [ set wall? true ]
  ask patch  3 3 [ set wall? true ]
end

to setup-nest
  set nest-x-red -25
  set nest-y-red -15
  set red-nest? (distancexy nest-x-red nest-y-red) < 1
  set red-nest-scent 200 - distancexy nest-x-red nest-y-red ;; spread nest-scent over the world

  set nest-x-black 20
  set nest-y-black 15
  set black-nest? (distancexy nest-x-black nest-y-black) < 1
  set black-nest-scent 200 - distancexy nest-x-black nest-y-black
  set ticks-to-give-food 500
end

to setup-food
  set number-of-food 3
  set food-source-x -100
  set food-source-y -100
  while [number-of-food > 0]
  [
     add-food-point
  ]
end

to add-food-point
  set food-size one-of [ 3 4 5 ]
    ask one-of patches [
    if not red-nest? and not black-nest? and not wall?[
      set food 3
      set food-source-x pxcor
      set food-source-y pycor
      set number-of-food ( number-of-food - 1)
      ]
    ]
    if food-source-x > -100 [
      ask patches with [(distancexy (food-source-x) food-source-y) < food-size][
        set food 1
      ]
    ]
end

to recolor-patch
  ifelse red-nest? or black-nest?
  [ set pcolor violet ]
  [ ifelse food > 0
    [ set pcolor brown ]
    [ ifelse wall?
      [ set pcolor green ]
      [ ifelse red-pheromone > black-pheromone
      [ set pcolor scale-color pink red-pheromone 0.1 60]
      [ set pcolor scale-color blue black-pheromone 0.1 60]
      ]
    ]
  ]
end

to go
  ask red-ants
  [ ifelse has-food?
    [ return-to-red-nest ]   ;; carrying food? take it back to nest
    [ look-for-food-red ]       ;; not carrying food? look for it
    wiggle
    fd 1 ]
  ask black-ants
  [ ifelse has-food?
    [ return-to-black-nest ]   ;; carrying food? take it back to nest
    [ look-for-food-black ]       ;; not carrying food? look for it
    wiggle
    if  ( patch-ahead 1 != nobody ) and ( [ wall? ] of patch-ahead 1 = true) [ rt 180 ]
    fd 1
  ]
  ask patches with [ wall? = true ][
    set black-pheromone 0
    set red-pheromone 0
  ]
  diffuse black-pheromone (diffusion-rate / 100)
  diffuse red-pheromone (diffusion-rate / 100) ;; get neighbours 1/8 from (diffusion-rate / 100) * pheromone
  ask patches with [ wall? = true ][
    set black-pheromone 0
    set red-pheromone 0
  ]

  ask patches
  [ set red-pheromone red-pheromone * (100 - evaporation-rate / 5) / 100  ;; slowly evaporate pheromone
    set black-pheromone black-pheromone * (100 - evaporation-rate / 5) / 100
    recolor-patch ]
  if ticks > 0 and ( ticks mod ticks-to-give-food = 0 ) [ ;; generate new piece of food
    add-food-point
  ]
  tick
end

to return-to-red-nest
  ifelse red-nest?
  [ set has-food? false ;; drop food and head out again
    rt 180 ]
  [ set red-pheromone ( red-pheromone + 60 )  ;; drop some pheromone
    uphill-red-nest-scent ]         ;; head toward the greatest value of nest-scent
end

to return-to-black-nest
  ifelse black-nest?
  [ set has-food? false ;; drop food and head out again
    lt 180 ]
  [ set black-pheromone ( black-pheromone + 60 ) ;; drop some pheromone
    uphill-black-nest-scent ]         ;; head toward the greatest value of nest-scent
end

to look-for-food-red
  if food > 0
  [ set has-food? true       ;; pick up food
    set food ( food - 1 )    ;; and reduce the food source
    rt 180                   ;; and turn around
    stop ]
  ;; go in the direction where the pheromone smell is strongest
  if (red-pheromone >= 0.09) and (red-pheromone < 2)
  [ uphill-red-nest-scent ]
end

to look-for-food-black
  if food > 0
  [ set has-food? true       ;; pick up food
    set food ( food - 1 )    ;; and reduce the food source
    rt 180                   ;; and turn around
    stop ]
  if (black-pheromone >= 0.09) and (black-pheromone < 2)
  [ uphill-black-nest-scent ]
end

to uphill-red-nest-scent
  let scent-ahead red-nest-scent-at-angle   0
  let scent-right red-nest-scent-at-angle  45
  let scent-left  red-nest-scent-at-angle -45
  if (scent-right > scent-ahead) or (scent-left > scent-ahead)
  [ ifelse scent-right > scent-left
    [ rt 45 ]
    [ lt 45 ] ]
end

to uphill-black-nest-scent
  let scent-ahead black-nest-scent-at-angle   0
  let scent-right black-nest-scent-at-angle  45
  let scent-left  black-nest-scent-at-angle -45
  if (scent-right > scent-ahead) or (scent-left > scent-ahead)
  [ ifelse scent-right > scent-left
    [ rt 45 ]
    [ lt 45 ] ]
end

to wiggle
  rt one-of [-45 0 45]
  if not can-move? 1 [ rt 180 ]
end

to-report red-nest-scent-at-angle [angle]
  let p patch-right-and-ahead angle 1
  if p = nobody [ report 0 ]
  report [red-nest-scent] of p
end

to-report black-nest-scent-at-angle [angle]
  let p patch-right-and-ahead angle 1
  if p = nobody [ report 0 ]
  report [black-nest-scent] of p
end